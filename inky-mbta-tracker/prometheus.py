from prometheus_client import Counter, Gauge

schedule_events = Counter(
    "imt_schedule_events", "Processed Schedule Events", ["action", "route_id", "stop"]
)

vehicle_events = Counter(
    "imt_vehicle_events", "Any updates to vehicles", ["action", "route_id"]
)

vehicle_speeds = Gauge(
    "imt_vehicle_speeds", "Vehicle speeds", ["route_id", "vehicle_id"]
)

tracker_executions = Counter("imt_tracker_executions", "Tracker Executions", ["stop"])

mbta_api_requests = Gauge(
    "mbta_api_requests", "Requests we are making to the MBTA API", ["endpoint"]
)

running_threads = Gauge("imt_active_threads", "Active Threads")

redis_commands = Gauge("imt_redis_cmds", "Redis commands made", ["name"])

track_predictions_generated = Counter(
    "imt_track_predictions_generated",
    "Track predictions generated by the predictor",
    ["station_id", "route_id", "prediction_method", "instance"],
)

track_predictions_cached = Counter(
    "imt_track_predictions_cached",
    "Track predictions served from cache",
    ["station_id", "route_id", "instance"],
)

track_prediction_confidence = Gauge(
    "imt_track_prediction_confidence",
    "Confidence score of track predictions",
    ["station_id", "route_id", "track_number", "instance"],
)

track_historical_assignments_stored = Counter(
    "imt_track_historical_assignments_stored",
    "Historical track assignments stored",
    ["station_id", "route_id", "track_number", "instance"],
)

track_pattern_analysis_duration = Gauge(
    "imt_track_pattern_analysis_duration_seconds",
    "Time taken to analyze track patterns",
    ["station_id", "route_id", "instance"],
)

track_predictions_validated = Counter(
    "imt_track_predictions_validated",
    "Track predictions validated against actual assignments",
    ["station_id", "route_id", "result", "instance"],
)

schema_key_counts = Gauge(
    "imt_schema_key_counts",
    "Number of keys in each Redis schema namespace",
    ["schema_id"],
)

track_negative_cache_hits = Counter(
    "imt_track_negative_cache_hits",
    "Track prediction negative cache hits to avoid redundant calculations",
    ["station_id", "route_id", "cache_reason", "instance"],
)

current_buffer_used = Gauge(
    "imt_current_buffer_used", "number of items stored in the buffer", ["name"]
)
max_buffer_size = Gauge(
    "imt_max_buffer_size",
    "maximum number of items that can be stored on this stream (or math.inf)",
    ["name"],
)
open_receive_streams = Gauge(
    "imt_open_receive_streams",
    "number of unclosed clones of the receive stream",
    ["name"],
)
open_send_streams = Gauge(
    "imt_open_send_streams", "number of unclosed clones of the send stream", ["name"]
)
tasks_waiting_receive = Gauge(
    "imt_tasks_waiting_receive",
    "number of tasks blocked on MemoryObjectReceiveStream.receive()",
    ["name"],
)
tasks_waiting_send = Gauge(
    "imt_tasks_waiting_send",
    "number of tasks blocked on MemoryObjectSendStream.send()",
    ["name"],
)

server_side_events = Counter(
    "imt_server_side_events", "Number of server-side events", ["id"]
)
